// Package sexpressions is a library for reading s-expressions. Lists, strings,
// comments, numbers, and symbols are supported.
package sexpressions

import (
	//"contracts"
	"fmt"
	"reflect"
	"strings"
	"testing"
)

////////////////////////////////////////////////////////////////////////////////
// Tests
////////////////////////////////////////////////////////////////////////////////

func TestReadFile(t *testing.T) {

	type genericForm interface {
		code() string
	}

	tests := []struct {
		want string
		f genericForm
	}{
		{
			"\"fancy \\\"string\\\" with quotes\"",
			StringForm(`fancy "string" with quotes`),
		},
		{"(int 42)", BasicForm(42)},
		{"42", UntypedForm(42)},
		{"(int8 42)", BasicForm(int8(42))},
		{"(complex64 2.000000 -4.000000)", BasicForm(complex64(2 - 4i))},
		{"((int 1) (int 2))", NewListInterface(BasicForm(1), BasicForm(2))},
		{"(abc x:Y)", NewListInterface(NewSymbolForm("go-user", "abc"), NewSymbolForm("x", "Y"))},
		{
			"(abc x:Y)",
			NewListInterface(
				NewSymbolForm("go-user", "abc"),
				NewSymbolForm("x", "Y")),
		},
		// Causes segfault:
		// {
		// 	"(abc x:Y)",
		// 	ListFromSymbolForms(
		// 		NewSymbolForm("go-user", "abc"),
		// 		NewSymbolForm("x", "Y")),
		// },
	}
	for _, tt := range tests {
		t.Run(tt.want, func(t *testing.T) {
			got, want := tt.f.code(), tt.want
			if got != want {
				t.Errorf("ReadFile() got diff in expected forms:\ngot  %v,\nwant %v", got, want)
			}
		})
	}
}

////////////////////////////////////////////////////////////////////////////////
// Implementation
////////////////////////////////////////////////////////////////////////////////
type Form(type ElemType) struct {
	elem ElemType
	adapter FormAdapter(ElemType)
	// TODO(reddaly): Make start and end optional.
	// start, end filePosition
	// fileSrc    *FileSource
}

func (f *Form(ElemType)) code() string {
	fc := &FormatContext{maxLineLength: 80}
	if err := f.adapter.Format(f.elem, fc); err != nil {
		return fmt.Sprintf("!!!error printing code: %v", err)
	}
	return fc.s.String()
}

func (f *Form(ElemType)) format(fc *FormatContext) error {
	return f.adapter.Format(f.elem, fc)
}

type FormatContext struct {
	maxLineLength int
	s strings.Builder
}

func (fc *FormatContext) Print(s string) {
	fc.s.WriteString(s)
}

type FormAdapter(type ElemType) interface {
	Format(e ElemType, fc *FormatContext) error
}

func newForm(type ElemType)(e ElemType, a FormAdapter(ElemType)) *Form(ElemType) {
	return &Form(ElemType){e, a}
}

// Functions that operate on *Form(T)

// Not yet supported:
// func formLess(type T contracts.Ordered(T))(a, b *Form(T)) bool {
// 	return a.elem < b.elem
// }


// Implementations of different Form(T) constructors:


type fnBasedFormAdapter(type ElemType) struct {
	format func(e ElemType, fc *FormatContext) error
}

func (a *fnBasedFormAdapter(ElemType)) Format(e ElemType, fc *FormatContext) error {
	return a.format(e, fc)
}

func StringForm(s string) *Form(string) {
	formatFn := func(s string, fc *FormatContext) error {
		fc.Print(fmt.Sprintf("%q", s))
		return nil
	}
	// It seems a bit verbose that (string) is required here, not fnBasedFormAdapter{...}.
	var adapter FormAdapter(string) = &fnBasedFormAdapter(string){formatFn}
	//var adapter FormAdapter(string) = &fnBasedFormAdapter{formatFn}
	return newForm(s, adapter)
}

contract PrimitiveType(T) {
	T bool, int, int8, int16, int32, int64, string, uint, uint8, uint16, uint32, uint64, float32, float64, complex64, complex128
	// string(T) is not a contract. Perhaps the std contracts package will provide this?
}

// Not yet supported. Maybe there is a contracts.Stringable() 
// func primitiveString(type T PrimitiveType(T))(t T) string  {
// 	return string(t)
// }

// basicFormAdapter implements FormAdapter() for the primitive types.
type basicFormAdapter(type T PrimitiveType) struct{}


func (a *basicFormAdapter(T)) Format(e T, fc *FormatContext) error {
	//This doesn't work: fc.Print(string(e)) -- cannot convert e (variable of type T) to string
	// This also doesn't work: cannot type switch on non-interface value e (type int)
	// switch ee := e.(type) {
	// case int: fc.Print(string(ee))
	// default: fc.Print(fmt.Sprintf("!!! unsupported type %v", e))
	// }
	// IMO, the proposal to allow switching on T is most natural:
	// switch T.(type) {
	//	case int: fc.Print(string(e))
	//	default: fc.Print(fmt.Sprintf("!!! unsupported type %v", e))
	// }

	// This can't be the only way, right?. As long as the optimizer is smart
	// enough to make this efficient, it's fine with me.
	rv := reflect.ValueOf(e)
	switch rv.Kind() {
	case reflect.Bool: fc.Print(fmt.Sprintf("(bool %v)", e))
	case reflect.Int:fc.Print(fmt.Sprintf("(int %v)", e))
	case reflect.Int8: fc.Print(fmt.Sprintf("(int8 %v)", e))
	case reflect.Int16: fc.Print(fmt.Sprintf("(int16 %v)", e))
	case reflect.Int32: fc.Print(fmt.Sprintf("(int32 %v)", e))
	case reflect.Int64: fc.Print(fmt.Sprintf("(int64 %v)", e))
	case reflect.Uint: fc.Print(fmt.Sprintf("(uint %v)", e))
	case reflect.Uint8: fc.Print(fmt.Sprintf("(uint8 %v)", e))
	case reflect.Uint16: fc.Print(fmt.Sprintf("(uint16 %v)", e))
	case reflect.Uint32: fc.Print(fmt.Sprintf("(uint32 %v)", e))
	case reflect.Uint64: fc.Print(fmt.Sprintf("(uint64 %v)", e))
	case reflect.Uintptr: fc.Print(fmt.Sprintf("(uintptr %v)", e))
	case reflect.Float32: fc.Print(fmt.Sprintf("(float32 %v)", e))
	case reflect.Float64: fc.Print(fmt.Sprintf("(float64 %v)", e))
	case reflect.Complex64: fc.Print(fmt.Sprintf("(complex64 %f %f)", real(rv.Complex()), imag(rv.Complex())))
	case reflect.Complex128:
		 fc.Print(fmt.Sprintf("(complex128 %f %f)", real(rv.Complex()), imag(rv.Complex())))
	case reflect.String:
		fc.Print(fmt.Sprintf("%q", rv.String()))
	}
	return nil
}

func BasicForm(type T PrimitiveType)(t T) *Form(T) {
	// doesn't work: adapter := &basicFormAdapter(T){}
	var adapter FormAdapter(T) = &basicFormAdapter(T){}
	return newForm(t, adapter)
}

// untypedFormAdapter implements FormAdapter() for the untyped primitive types.
type untypedFormAdapter(type T PrimitiveType) struct{}


func (a *untypedFormAdapter(T)) Format(e T, fc *FormatContext) error {
	fc.Print(fmt.Sprintf("%v", e))
	return nil
}

func UntypedForm(type T PrimitiveType)(t T) *Form(T) {
	var adapter FormAdapter(T) = &untypedFormAdapter(T){}
	return newForm(t, adapter)
}



type GenericForm interface {
	code() string
	format(fc *FormatContext) error
}

func NewListInterface(f ...GenericForm) *Form([]GenericForm) {
	formatFn := func(list []GenericForm, fc *FormatContext) error {
		fc.Print("(")
		for i := 0; i < len(list); i++ {
			if i != 0 { fc.Print(" ")}
			list[i].format(fc)
		}
		fc.Print(")")
		return nil
	}
	// It seems a bit verbose that (string) is required here, not fnBasedFormAdapter{...}.
	var adapter FormAdapter([]GenericForm) = &fnBasedFormAdapter([]GenericForm){formatFn}
	//var adapter FormAdapter(string) = &fnBasedFormAdapter{formatFn}
	return newForm(f, adapter)
}

// Doesn't work

// func ListFromForms(type E)(f ...*Form(E)) *Form([]*Form(E)) {
// 	// formatFn := func(list []*Form(E), fc *FormatContext) error {
// 	// 	fc.Print("(")
// 	// 	for i := 0; i < len(list); i++ {
// 	// 		if i != 0 { fc.Print(" ")}
// 	// 		list[i].format(fc)
// 	// 	}
// 	// 	fc.Print(")")
// 	// 	return nil
// 	// }
// 	// It seems a bit verbose that (string) is required here, not fnBasedFormAdapter{...}.
// 	var adapter FormAdapter([]*Form(E)) = uniformListAdapter(E){}
	
// 	// xx := &fnBasedFormAdapter([]*Form(E)){}
// 	// xx.format = formatFn
// 	// adapter = xx
// 	//var adapter FormAdapter(string) = &fnBasedFormAdapter{formatFn}
// 	return newForm([]*Form(E))(f, adapter)
// 	//return nil
// }

// Causes segfault
//
// func ListFromSymbolForms(f1, f2 *Form(*Symbol)) *Form([]*Form(*Symbol)) {
// 	var adapter FormAdapter([]*Form(*Symbol)) = uniformListAdapter(*Symbol){}
// 	value := []*(Form(*Symbol)){f1, f2}
// 	return newForm([]*(Form(*Symbol)))(value, adapter)
// }

type uniformListAdapter(type E) struct{}

func (ul uniformListAdapter(E)) Format(list []*Form(E), fc *FormatContext) error {
	fc.Print("(")
	for i := 0; i < len(list); i++ {
		if i != 0 { fc.Print(" ")}
		list[i].format(fc)
	}
	fc.Print(")")
	return nil
}


// func NewListContract2(type F GenericForm)(f ...F) *Form([]F) {
// 	formatFn := func(list []F, fc *FormatContext) error {
// 		fc.Print("(")
// 		for i := 0; i < len(list); i++ {
// 			if i != 0 { fc.Print(" ")}
// 			list[i].format(fc)
// 		}
// 		fc.Print(")")
// 		return nil
// 	}
// 	// It seems a bit verbose that (string) is required here, not fnBasedFormAdapter{...}.
// 	var adapter FormAdapter([]F) = &fnBasedFormAdapter([]F){formatFn}
// 	//var adapter FormAdapter(string) = &fnBasedFormAdapter{formatFn}
// 	return newForm(f, adapter)
// }

// Lisp-style symbols
type symbolUniverse struct {
	syms []Symbol
}

func (u *symbolUniverse) intern(packageName, name string) *Symbol {
	return firstOrDefault(Symbol)(u.syms, func(s *Symbol)bool {
		return s.p == packageName && s.n == name
	}, func() *Symbol {
		return &Symbol{u, packageName, name}
	})
}

// omg, thank you, we can finally write this.
func firstOrDefault(type E)(list []E, predicate func(e *E) bool, defaultProvider func() *E ) *E {
	for i := range list {
		ptr := &list[i]
		if predicate(ptr) {
			return ptr
		}
	}
	return defaultProvider()
}

type Symbol struct {
	u *symbolUniverse
	p, n string
}

func (s *Symbol) PackageName() string {
	return s.p
}

func (s *Symbol) Name() string {
	return s.n
}

func (s *Symbol) Equal(other *Symbol) bool {
	return s == other // pointer equality
}

func (s *Symbol) exported() bool {
	n := s.Name()
	if len(n) == 0 { return false}
	return strings.ToUpper(n[0:1]) == n[0:1]
}

func (s *Symbol) code(fc *FormatContext) string {
	if s.PackageName() == "" || s.PackageName() == currentPackage(fc) {
		return s.Name()
	}
	if !s.exported() {
		return fmt.Sprintf("%s::%s", s.PackageName(), s.Name())
	}
	return fmt.Sprintf("%s:%s", s.PackageName(), s.Name())
}

func currentPackage(fc *FormatContext) string {
	return "go-user"
}

var defaultUniverse = &symbolUniverse{}

func NewSymbolForm(packageName, name string) *Form(*Symbol) {
	sym := defaultUniverse.intern(packageName, name)

	formatFn := func(s *Symbol, fc *FormatContext) error {
		fc.Print(s.code(fc))
		return nil
	}
	// It seems a bit verbose that (string) is required here, not fnBasedFormAdapter{...}.
	var adapter FormAdapter(*Symbol) = &fnBasedFormAdapter(*Symbol){formatFn}
	//var adapter FormAdapter(string) = &fnBasedFormAdapter{formatFn}
	return newForm(sym, adapter)
}


// FormReader

type rowCol struct { row, col int }
type cursorOffset int

type sourceFile interface {
	fileName() string
	readRune() (rune, error)
	peekRune() (rune, error)
	cursorOffset() cursorOffset
	rowCol(cursorOffset) rowCol
}

type strSourceFile struct {
	name string
	cursor cursorOffset
	cursorOffsetToRune []rune
}

func newStrSourceFile(name, code string) *strSourceFile {

}

type FormReader struct {

}

func (fr *FormReader) consumeForm() error {
	r, _, err := src.ReadRune()
	if err != nil {
		return nil, err
	}
	if err := src.UnreadRune(); err != nil {
		return nil, err
	}
	switch r {
	case ' ', '\t', '\n':
		return fr.consumeWhitespace(src)
	case '(':
		return fr.consumeList(cfg, src)
	case ')':
		return nil, fmt.Errorf("%s: unexpected character %q", src, r)
	case '"':
		return fr.consumeString(src)
	case '\'':
		return fr.consumeQuotedExpression(cfg, src)
	default:
		return fr.consumeNonWhitespace(cfg, src)
	}
}

type CodeSource struct {
	name string
	contents string
}

